{"version":3,"sources":["components/courseForm/courseForm.js","components/courseList/courseList.js","App.js","serviceWorker.js","index.js"],"names":["CourseForm","props","react_default","a","createElement","onSubmit","updateForm","type","onChange","updateCourse","className","CoursrList","state","isPress","val","len","RenderCourse","_this","courses","name","onClick","toggleState","deleteCourses","index","getVal","e","target","value","eee","preventDefault","editCourse","defaultValue","setState","react","this","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","current","console","log","co","length","alert","push","course","splice","_this2","list","map","key","courseList","courseForm_courseForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.366408f8.chunk.js","sourcesContent":["import React from 'react'\r\nimport './courseForm.css'\r\n\r\nconst CourseForm = (props) =>\r\n{\r\n  \r\n    return(\r\n            <form onSubmit={props.updateForm}>\r\n                <input type=\"text\"  onChange={props.updateCourse} />\r\n                <button className=\"btn1\" type=\"submit\">add course</button>\r\n         </form>\r\n\r\n    )\r\n}\r\nexport default CourseForm;","import React,{Component,Fragment} from 'react';\r\nimport './couresList.css'\r\nclass CoursrList extends Component {\r\n  state={\r\n    isPress:false,\r\n    val:\"\",\r\n    len:0\r\n  }\r\n  \r\n  RenderCourse = () =>\r\n    {\r\n return(\r\n  <li >\r\n <span className=\"in\"> {this.props.courses.name}</span>\r\n <span className=\"ee\">\r\n <button className=\"btn2\" onClick={()=> this.toggleState()}>edit course</button>\r\n  <button className=\"btn3\" onClick={()=> this.props.deleteCourses(this.props.index)}>delete course</button>\r\n  </span>\r\n  </li>\r\n )\r\n    }\r\n    getVal=(e)=>\r\n    {\r\n      this.state.val=e.target.value;\r\n    }\r\n    eee=(e)=>\r\n    {\r\n      e.preventDefault();\r\n      this.props.editCourse(this.props.index,this.state.val);\r\n      this.toggleState();\r\n    }\r\n    updateForm=()=>\r\n    {\r\n      return(\r\n      <form onSubmit={this.eee}>\r\n        <input className=\"i\" type=\"text\" onChange={this.getVal} defaultValue={this.props.courses.name} />\r\n        <button className=\"btn1 btn5\">update course</button>  \r\n      </form>\r\n      )\r\n    }\r\n    toggleState =()=>\r\n    {\r\n      let isPress=this.state.isPress;\r\n      this.setState({\r\n        isPress:!isPress\r\n      })\r\n    }\r\n  render()\r\n  {\r\n    // const dd=this.props.index;\r\n  return (\r\n    <Fragment>\r\n      {this.state.isPress?this.updateForm():this.RenderCourse()}\r\n    </Fragment>\r\n  );\r\n}\r\n}\r\nexport default CoursrList;","import React,{Component} from 'react';\nimport CourseForm from './components/courseForm/courseForm';\nimport CourseList from './components/courseList/courseList';\nimport './App.css'\nclass App extends Component {\n// get value\n\n\n  state={\n    courses:[\n    {name:'Html'},\n    {name:'Css'},\n    {name:'Javascript'}],\n    current:\"\"\n  };\n  constructor()\n  {\n    super();\n    console.log(this.state.courses);\n  }\n     updateCourse=(e)=>\n{\n  this.state.current= e.target.value;\n  console.log(this.state.current)\n};\nupdateForm=(e)=>{\n  e.preventDefault();\n  \nlet co=this.state.courses;\nif(this.state.current.length==0){\n  alert(\"must enter value\")\n}\n\nelse\n{\nco.push({name:this.state.current});\nthis.setState({\n  courses:co\n});\n}\n}\ndeleteCourses=(name)=>\n{ \n \n  const course=this.state.courses;\n  course.splice(name,1);\n  this.setState({\n    courses:course\n  })\n}\n editCourse=(index,value)=>\n{\n let courses=this.state.courses;\n courses[index].name=value;\n this.setState({\n   courses:courses\n })\n}\n  render()\n  {\n    const courses=this.state.courses;\n    const list= courses.map((list,key)=>\n    {\n      return(\n        <CourseList key={key} index={key} courses={list}  deleteCourses={this.deleteCourses} editCourse={this.editCourse}  />\n      )\n    })\n  return (\n    <section className=\"App\">\n      <h1>add course</h1>\n   <CourseForm  updateCourse={this.updateCourse} updateForm={this.updateForm}/>\n   <ul>\n   {this.state.courses.length>0?list:\"no item to show\"}\n   </ul>\n    </section>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}